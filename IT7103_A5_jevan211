# %%
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from matplotlib import pyplot as plt

from sklearn.preprocessing import OneHotEncoder, FunctionTransformer
from sklearn.compose import ColumnTransformer
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline

from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier

# %%
a5_data = pd.read_csv("real_estate_value.csv")
a5_data.head()

# %%
a5_data.shape, a5_data.info()

# %%
from matplotlib import pyplot as plt

traindata, testdata = train_test_split(a5_data, test_size=0.20) #test_size=0.2 means that 20% of data will be for testing, 80% for training
traindata.shape, testdata.shape

traindata.hist(bins=20, figsize=(20,15))
plt.show()

# %%
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

# Define features and target variable
X = data.drop('UnitPrice', axis=1)
y = data['UnitPrice']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

decision_tree = DecisionTreeRegressor(random_state=42)
decision_tree.fit(X_train, y_train)


y_pred_dt = decision_tree.predict(X_test)


mse_dt = mean_squared_error(y_test, y_pred_dt)

# Initialize and train the Random Forest Regressor
random_forest = RandomForestRegressor(random_state=42, n_estimators=100)
random_forest.fit(X_train, y_train)

# Predict using the Random Forest Regressor
y_pred_rf = random_forest.predict(X_test)

# Calculate performance for Random Forest
mse_rf = mean_squared_error(y_test, y_pred_rf)



# Display the performance
performance = {
    'Model': ['Decision Tree', 'Random Forest'],
    'Mean Squared Error': [mse_dt, mse_rf]
}
performance



